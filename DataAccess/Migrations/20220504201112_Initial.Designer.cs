// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220504201112_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.3.22175.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.BeatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Bpm")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PathToDemo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PathToTrackout")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PathToWav")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PriceToBuy")
                        .HasColumnType("integer");

                    b.Property<int>("PriceToLease")
                        .HasColumnType("integer");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ShoppingBagEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("ShoppingBagEntityId");

                    b.ToTable("Beats");
                });

            modelBuilder.Entity("DataAccess.Models.ClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telegram")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BagId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DataAccess.Models.ContractEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PathToFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("DataAccess.Models.Crm.FunnelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Funnels");
                });

            modelBuilder.Entity("DataAccess.Models.Crm.SectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FunnelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FunnelId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("DataAccess.Models.DealEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BeatId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContractId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("DataAccess.Models.ShoppingBagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Bags");
                });

            modelBuilder.Entity("DataAccess.Models.BeatEntity", b =>
                {
                    b.HasOne("DataAccess.Models.Crm.SectionEntity", "Section")
                        .WithMany("Beats")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ShoppingBagEntity", null)
                        .WithMany("Beats")
                        .HasForeignKey("ShoppingBagEntityId");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("DataAccess.Models.ClientEntity", b =>
                {
                    b.HasOne("DataAccess.Models.ShoppingBagEntity", "Bag")
                        .WithMany()
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bag");
                });

            modelBuilder.Entity("DataAccess.Models.ContractEntity", b =>
                {
                    b.HasOne("DataAccess.Models.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataAccess.Models.Crm.SectionEntity", b =>
                {
                    b.HasOne("DataAccess.Models.Crm.FunnelEntity", "Funnel")
                        .WithMany("Sections")
                        .HasForeignKey("FunnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funnel");
                });

            modelBuilder.Entity("DataAccess.Models.DealEntity", b =>
                {
                    b.HasOne("DataAccess.Models.BeatEntity", "Beat")
                        .WithMany()
                        .HasForeignKey("BeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ClientEntity", "Client")
                        .WithMany("Deals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ContractEntity", "Contract")
                        .WithMany("Deals")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beat");

                    b.Navigation("Client");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("DataAccess.Models.ShoppingBagEntity", b =>
                {
                    b.HasOne("DataAccess.Models.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataAccess.Models.ClientEntity", b =>
                {
                    b.Navigation("Deals");
                });

            modelBuilder.Entity("DataAccess.Models.ContractEntity", b =>
                {
                    b.Navigation("Deals");
                });

            modelBuilder.Entity("DataAccess.Models.Crm.FunnelEntity", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("DataAccess.Models.Crm.SectionEntity", b =>
                {
                    b.Navigation("Beats");
                });

            modelBuilder.Entity("DataAccess.Models.ShoppingBagEntity", b =>
                {
                    b.Navigation("Beats");
                });
#pragma warning restore 612, 618
        }
    }
}
